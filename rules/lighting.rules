val Functions$Function3 <SwitchItem, ColorItem, NumberItem, Boolean> cycleColors = [ light, lightColor, mode |
    var hue = 0
    val sat = new PercentType(75)
    val bright = new PercentType(100)
    var direction = 1
    val long pause = 200

    logInfo("color", "Starting color loop for " + light.name)
    
    // Make sure the light is ON
    if(light.state != ON) light.sendCommand(ON)
    
    while(mode.state == ON && light.state == ON) {
    	
    	Thread::sleep(pause)
    	
    	hue = hue + (5 * direction)
    	if(hue >= 360) {
    		hue = 360
    		direction = direction * -1
    	}
    	else if (hue < 0) {
    		hue = 0
    		direction = direction * -1
    	}
    	
    	lightColor.sendCommand(new HSBType(new DecimalType(hue), sat, bright).toString) // for some reason Designer marks just HSBType as ambiguous function call so I call toString
    }
    
    true    
]

rule "TV Room Floor Lamp Color Cycle"
when
    Item Bulb_colour_change changed
then
    if(Bulb_colour_change.state == ON )  {
        cycleColors.apply(Switch_bulb, Bulb_color, Bulb_colour_change)
    }
end
