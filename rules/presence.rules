// taken from https://community.openhab.org/t/generic-presence-detection/17878

val String filename = "presence.rules"

rule "Reset Presence and sensors to OFF on startup"
when
    System started
then
    Presence.sendCommand(OFF)
    Presence_Sensors.sendCommand(OFF)
end

rule "A presence sensor was updated"
when
        Item Presence_Sensors changed
then

    if(Presence_Timer.state == ON && Presence_Sensors.state == Presence.state) {
        logInfo(filename, "Timer is running but group and proxy are the same => cancelling timer")
        Presence_Timer.postUpdate(OFF)
    }
    else if(Presence_Sensors.state == Presence.state) {
        logInfo(filename, "No timer and both group and proxy are the same => nothing to do")
        return;
    }

    if(Presence_Sensors.state == OFF) {
        logInfo(filename, "Everyone is away, setting anti-flapping timer")
        Presence_Timer.sendCommand(ON)
    }
    else if(Presence_Sensors.state == ON) {
        logInfo(filename, "Someone came home, setting presence to ON")
        Presence.sendCommand(ON)
    }

end

rule "Presence timer expired, no one is at home"
when
    Item Presence_Timer received command OFF
then
    logInfo(filename, "Everyone is still away, setting presence to OFF")
    Presence.sendCommand(OFF)
end

// this rule can cause problems, when other heating modes are wanted e.g. off or away
// hence it has to be queried, if it is in a normal status and only then change 
// or use presence in the heating mode rules instead, so not to divert into 
rule "Set heating mode based on presence"
when
    Item Presence received command or
    Item Presence changed
then
    if(Presence.state == ON) {
        logInfo(filename, "Someone is at home, change to Heating Mode HOMEOFFICE")
        Home_Heating_Mode.postUpdate("HOMEOFFICE")
    }
    else {
        logInfo(filename, "No one is at home, change to Heating Mode NORMAL")
        Home_Heating_Mode.postUpdate("NORMAL")
    }
    
end