val String filename = "heating-modes.rules"

// vordefinierte Temperaturen 
val Number tempHigh = 20.0
val Number tempBoilerControl = 20.0 // set slightly higher to enable Vaillant controller to reach temperature
val Number tempComfort = 19.0
val Number tempMid = 17.0
val Number tempLower = 16.0
val Number tempChill = 14.0
val Number tempAway = 15.0
val Number tempAwayLonger = 13.0
val Number tempOff = 0.0

// vordefinierte Temperaturen
val Wohnraum = 19.0
val Schlafzimmer = 17.0 
val Kueche = 18.0
val Bad = 20.0 // unused until new extension, does not have homematic valve 
val Flur = 17.0

val TagsueberAbwesend = 18.0
val Nachts = 18.0
val Abwesenheit = 15.0
val LaengereAbwesenheit = 13.0

// Heizmodi für die ganze Wohnung:
//  NORMAL: Betriebsmodus für die normale Arbeitswoche
//  HOMEOFFICE: Folgt Normal
//  PARTY: Konstante Beheizung, automatischer Wechsel zu NORMAL in der Nacht (nach der Party oder dem besonderen Tag)
//  SICKDAY: Wärmere Beheizung für den laufenden Tag (Krank zuhause)
//  WEEKEND_TRIP: leicht abgesenkte Temperatur über das Wochenende, automatischer Wechsel zu NORMAL am nächsten Montag morgen
//  AWAY: Unterwegs/längere Zeit abwesend, abgesenkte Temperatur für einen undefinierten Zeitraum
//  OFF_SUMMER: alle Heizkörper sind aus (Sommerbetrieb)
//  CALENDAR: einzelne Kalender Termine überschreiben das aktuelle Zeitprogramm
//  AUTO_DEVICE: Wechselt Gerät in automatik Modus, keine automatische Beeinflussung
//  MANU_DEVICE: Wechselt Gerät in manuellen Modus, keine automatische Beeinflussung
// Die cron jobs werden dann ausgefëhrt, aber nur wenn im Mode NORMAL oder HOMEOFFICE werden die Temperaturen die dort
// enthalten sind gesetzt, ansonsten die defaults für den jeweiligen Modus
// Time cron S Min H DoM Mo DoW Y
// Seconds, Minutes, Hours, Day-of-Month, Month, Day-of-Week,Year (optional field)

rule "System started"
when
    System started
then
    createTimer(now.plusSeconds(180)) [ |
        logInfo(filename, "Home_Heating system started")
	// re-activate, when this should really be considered i.e. with season or not
        /*if (SeasonName.state == "SUMMER" || SeasonName.state == "SPRING") {
            Home_Heating_Mode.postUpdate("OFF_SUMMER")
        } */
        if (Home_Heating_Mode.state == NULL) Home_Heating_Mode.postUpdate("NORMAL")
        Heating_TargetPresets.members.filter[item | item.state == NULL].forEach[item | item.postUpdate(tempMid)]
        Home_Heating_UpdateHeater.sendCommand(ON)
    ]
end

/*rule "Turn heating on in autumn or winter"
when
    Item SeasonName changed to "AUTUMN" or
    Item SeasonName changed to "WINTER"
then
    if ( Weather_FeelTemp.state < 10 ) { // Turn it on only if it is below 10 degrees
        Home_Heating_Mode.postUpdate("NORMAL")
    }
end */

rule "Heizmodus umschalten und Stellglieder setzen"
when
    Item Home_Heating_Mode received update or
    Item Home_Heating_UpdateHeater received command ON
then
    Home_Heating_UpdateHeater.postUpdate(OFF)
    logInfo(filename, "Wohnung Heizmodus: " + Home_Heating_Mode.state)
    switch Home_Heating_Mode.state {
        case "NORMAL" : {
            KI_WallThermostat_SetTemp.sendCommand(KI_Radiator_PresetTemp.state as Number)
            //EN_Radiator_Manu.sendCommand(EN_Radiator_PresetTemp.state as Number)
            HA_EN_WallThermostat_SetTemp.sendCommand(HA_Radiator_PresetTemp.state as Number)
            LR_WallThermostat_SetTemp.sendCommand(LR_Radiator_PresetTemp.state as Number)
            DR_Radiator_Manu.sendCommand(DR_Radiator_PresetTemp.state as Number)
            MAB_WallThermostat_SetTemp.sendCommand(MAB_Radiator_PresetTemp.state as Number)
            MIB_WallThermostat_SetTemp.sendCommand(MIB_Radiator_PresetTemp.state as Number)
            BAB_WallThermostat_SetTemp.sendCommand(BAB_Radiator_PresetTemp.state as Number)
        }
        case "HOMEOFFICE" : {
            KI_WallThermostat_SetTemp.sendCommand(KI_Radiator_PresetTemp.state as Number)
            HA_EN_WallThermostat_SetTemp.sendCommand(HA_Radiator_PresetTemp.state as Number)
            LR_WallThermostat_SetTemp.sendCommand(LR_Radiator_PresetTemp.state as Number)
            DR_Radiator_Manu.sendCommand(DR_Radiator_PresetTemp.state as Number)
            MAB_WallThermostat_SetTemp.sendCommand(MAB_Radiator_PresetTemp.state as Number)
            MIB_WallThermostat_SetTemp.sendCommand(MIB_Radiator_PresetTemp.state as Number)
            BAB_WallThermostat_SetTemp.sendCommand(BAB_Radiator_PresetTemp.state as Number)
        }
        case "PARTY" : {
            KI_WallThermostat_SetTemp.sendCommand(tempComfort)
            HA_EN_WallThermostat_SetTemp.sendCommand(tempMid)
            LR_WallThermostat_SetTemp.sendCommand(tempComfort)
            DR_Radiator_Manu.sendCommand(tempComfort)
            MAB_WallThermostat_SetTemp.sendCommand(tempLower)
            MIB_WallThermostat_SetTemp.sendCommand(tempLower)
            BAB_WallThermostat_SetTemp.sendCommand(tempLower)
         }
        case "SICKDAY" : {
            KI_WallThermostat_SetTemp.sendCommand(tempHigh)
            HA_EN_WallThermostat_SetTemp.sendCommand(tempMid)
            LR_WallThermostat_SetTemp.sendCommand(tempComfort)
            DR_Radiator_Manu.sendCommand(tempMid)
            MAB_WallThermostat_SetTemp.sendCommand(tempMid)
            MIB_WallThermostat_SetTemp.sendCommand(tempMid)
            BAB_WallThermostat_SetTemp.sendCommand(tempMid)
        }
        case "WEEKEND_TRIP" : {
            KI_WallThermostat_SetTemp.sendCommand(tempAway)
            HA_EN_WallThermostat_SetTemp.sendCommand(tempAway)
            LR_WallThermostat_SetTemp.sendCommand(tempAway)
            DR_Radiator_Manu.sendCommand(tempAway)
            MAB_WallThermostat_SetTemp.sendCommand(tempAway)
            MIB_WallThermostat_SetTemp.sendCommand(tempAway)
            BAB_WallThermostat_SetTemp.sendCommand(tempAway)
        }
        case "AWAY" : {
            KI_WallThermostat_SetTemp.sendCommand(tempAwayLonger)
            HA_EN_WallThermostat_SetTemp.sendCommand(tempAwayLonger)
            LR_WallThermostat_SetTemp.sendCommand(tempAwayLonger)
            DR_Radiator_Manu.sendCommand(tempAwayLonger)
            MAB_WallThermostat_SetTemp.sendCommand(tempAwayLonger)
            MIB_WallThermostat_SetTemp.sendCommand(tempAwayLonger)
            BAB_WallThermostat_SetTemp.sendCommand(tempAwayLonger)
        }
        case "OFF_SUMMER" : {
            KI_WallThermostat_SetTemp.sendCommand(tempOff)
            HA_EN_WallThermostat_SetTemp.sendCommand(tempOff)
            LR_WallThermostat_SetTemp.sendCommand(tempOff)
            DR_Radiator_Manu.sendCommand(tempOff)
            MAB_WallThermostat_SetTemp.sendCommand(tempOff)
            MIB_WallThermostat_SetTemp.sendCommand(tempOff)
            BAB_WallThermostat_SetTemp.sendCommand(tempOff)
        }
        case "CALENDAR"    : { logWarn(filename, "Wohnung Heizmodus: CALENDAR (nicht implementiert)") }
        case "AUTO_DEVICE" : { logWarn(filename, "Wohnung Heizmodus: AUTO_DEVICE (nicht implementiert)") }
        case "MANU_DEVICE" : { logWarn(filename, "Wohnung Heizmodus: MANU_DEVICE (nicht implementiert)") }
        default            : { logError(filename, "Wohnung Heizmodus ungültig: " + Home_Heating_Mode.state) }
    }
end

// gute Idee, um ein Thermostat mit der Gastherme zu verbinden
// specific to my home
rule "Wohnzimmer: Wandthermostat folgt VRC700f"
when
    Item VRC700_DayTemp changed
then
    logInfo(filename, "Wohnzimmer Heizung: Folge VRC700f Sollwert")
    LR_WallThermostat_SetTemp.sendCommand(VRC700_DayTemp.state as Number)
end

// Home_Heating_Mode Ende PARTY/SICKDAY
rule "Party/Sick Modus Ende 2:00 Uhr"
when
    Time cron "0 0 2 ? * * "
then
    if (Home_Heating_Mode.state == "PARTY" || Home_Heating_Mode.state == "SICKDAY") {
        logInfo(filename, "Wohnung Heizmodus: PARTY/SICKDAY wird verlassen")
        Home_Heating_Mode.postUpdate("NORMAL")
    }
end

// Home_Heating_Mode Ende WEEKEND_TRIP
rule "Wochenendtrip Ende Montag 13:00 Uhr"
when
    Time cron "0 0 13 ? * MON"
then
    if (Home_Heating_Mode.state == "WEEKEND_TRIP") {
        logInfo(filename, "Wohnung Heizmodus: WEEKEND TRIP wird verlassen")
        Home_Heating_Mode.postUpdate("NORMAL")
    }
end

// Home_Heating_Mode NORMAL Zeitprogramm
rule "1:30 Uhr"
when
    Time cron "0 30 1 ? * * "
then
    logInfo(filename, "Wohnung Heizmodus: Zeitprogramm: " + now.toString)
    LR_Radiator_PresetTemp.postUpdate(Nachts)
    DR_Radiator_PresetTemp.postUpdate(Nachts)
    KI_Radiator_PresetTemp.postUpdate(Nachts)
    HA_Radiator_PresetTemp.postUpdate(Nachts)
    MAB_Radiator_PresetTemp.postUpdate(Nachts)
    MIB_Radiator_PresetTemp.postUpdate(Nachts)
    BAB_Radiator_PresetTemp.postUpdate(Nachts)
    Home_Heating_UpdateHeater.sendCommand(ON)
end

rule "6:30 Uhr (Wochentag)"
when
    Time cron "0 30 6 ? * MON-FRI"
then
    logInfo(filename, "Wohnung Heizmodus: Zeitprogramm: " + now.toString)
    LR_Radiator_PresetTemp.postUpdate(Wohnraum)
    DR_Radiator_PresetTemp.postUpdate(Kueche)
    KI_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    HA_Radiator_PresetTemp.postUpdate(Flur)
    MAB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    MIB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    BAB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    Home_Heating_UpdateHeater.sendCommand(ON)
end

rule "8:00 Uhr (Wochentag)"
when
    Time cron "0 0 8 ? * MON-FRI"
then
    logInfo(filename, "Wohnung Heizmodus: Zeitprogramm: " + now.toString)
    LR_Radiator_PresetTemp.postUpdate(Wohnraum)
    DR_Radiator_PresetTemp.postUpdate(Kueche)
    KI_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    HA_Radiator_PresetTemp.postUpdate(Flur)
    MAB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    MIB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    BAB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    Home_Heating_UpdateHeater.sendCommand(ON)
end

rule "8:00 Uhr (Wochenende)"
when
    Time cron "0 1 8 ? * SAT,SUN"
then
    logInfo(filename, "Wohnung Heizmodus: Zeitprogramm: " + now.toString)
    LR_Radiator_PresetTemp.postUpdate(Wohnraum)
    DR_Radiator_PresetTemp.postUpdate(Kueche)
    KI_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    HA_Radiator_PresetTemp.postUpdate(Flur)
    MAB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    MIB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    BAB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    Home_Heating_UpdateHeater.sendCommand(ON)
end


rule "08:30 Uhr (Woche Homeoffice)"
when
    Time cron "0 30 8 ? * MON,TUE,WED,FRI"
then
    if (Home_Heating_Mode.state == "HOMEOFFICE") {
        logInfo(filename, "Wohnung Heizmodus: Zeitprogramm: " + now.toString)
        BAB_Radiator_PresetTemp.postUpdate(Kueche)
        Home_Heating_UpdateHeater.sendCommand(ON)
    }
end


rule "18:00 Uhr"
when
    Time cron "0 0 18 ? * *"
then
    logInfo(filename, "Wohnung Heizmodus: Zeitprogramm: " + now.toString)
    LR_Radiator_PresetTemp.postUpdate(Wohnraum)
    DR_Radiator_PresetTemp.postUpdate(Wohnraum)
    KI_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    HA_Radiator_PresetTemp.postUpdate(Flur)
    MAB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    MIB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    BAB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    Home_Heating_UpdateHeater.sendCommand(ON)
end

rule "20:30 Uhr"
when
    Time cron "0 30 20 ? * *"
then
    logInfo(filename, "Wohnung Heizmodus: Zeitprogramm: " + now.toString)
    LR_Radiator_PresetTemp.postUpdate(Wohnraum)
    DR_Radiator_PresetTemp.postUpdate(Kueche)
    KI_Radiator_PresetTemp.postUpdate(Flur)
    HA_Radiator_PresetTemp.postUpdate(Flur)
    MAB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    MIB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    BAB_Radiator_PresetTemp.postUpdate(Schlafzimmer)
    Home_Heating_UpdateHeater.sendCommand(ON)
end


// vim: syntax=Xtend
